{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/components/header.tsx", "../app/components/layout.tsx", "../app/lib/getStreamInfo.server.ts", "../app/routes/api/getTagsForSidebar.ts", "../app/utils/prisma.server.ts", "../app/routes/api/syncNewVideos.ts", "../app/sync/clients/youtubeRss.server.ts", "../app/sync/validators/youtubeRss.server.ts", "../app/routes/api/syncChannels.ts", "../app/sync/clients/youtubeApi.server.ts", "../app/utils/debug.server.ts", "../app/routes/api/syncChannel.ts", "../app/sync/services/matching.ts", "../app/routes/api/syncVideos.ts", "../app/routes/[sitemap.xml].tsx", "../app/routes/api/matchTags.ts", "../app/routes/[robots.txt].tsx", "../app/routes/__videos.tsx", "../app/components/tagButton.tsx", "../app/hooks/useUrlState.ts", "../app/utils/validators.ts", "../app/hooks/useActionUrl.ts", "../app/components/sidebar.tsx", "../app/lib/getVideos.ts", "../app/routes/__videos/tags/$.tsx", "../app/components/Taglist.tsx", "../app/components/VideoGridItem.tsx", "../app/components/VideosGrid.tsx", "../app/components/loadingSpinner.tsx", "../app/lib/getActiveTagsBySlugs.ts", "../app/routes/__videos/index.tsx", "../app/routes/stats.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n// import * as Sentry from \"@sentry/remix\";\n// import { prisma } from \"~/utils/prisma.server\";\n\n// Sentry.init({\n//   dsn: \"https://5c4951b4713443e18cb2e5871d45a782@o1293114.ingest.sentry.io/6564125\",\n//   tracesSampleRate: 1,\n//   integrations: [new Sentry.Integrations.Prisma({ client: prisma })],\n// });\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { LoaderFunction, MetaFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData,\n} from \"@remix-run/react\";\nimport Layout from \"./components/layout\";\nimport styles from \"./styles/app.css\";\nimport { getStreamInfo } from \"./lib/getStreamInfo.server\";\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"HasanHub\",\n  viewport: \"width=device-width,initial-scale=1\",\n  description: \"The HasanAbi Clips Industrial Complex App\",\n  keywords: \"hasanabi, hasanhub, hasan piker, streamer, youtube, clips, twitch\",\n  \"msapplication-tileColor\": \"#da532c\",\n  \"theme-color\": \"#ffffff\",\n  \"yandex-verification\": \"45afda70569d2af8\",\n});\n\nexport function links() {\n  return [\n    { rel: \"stylesheet\", href: styles },\n    { rel: \"icon\", href: \"/favicon.ico\" },\n    {\n      rel: \"apple-touch-icon\",\n      size: \"180x180x\",\n      href: \"/apple-touch-icon.png\",\n    },\n    {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\",\n    },\n    {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\",\n    },\n    {\n      rel: \"mask-icon\",\n      href: \"/safari-pinned-tab.svg\",\n      color: \"#5bbad5\",\n    },\n    {\n      rel: \"manifest\",\n      href: \"site.webmanifest\",\n    },\n    {\n      rel: \"preconnect\",\n      href: \"\thttps://i.ytimg.com\",\n    },\n    {\n      rel: \"dns-prefetch\",\n      href: \"\thttps://i.ytimg.com\",\n    },\n  ];\n}\n\nexport async function loader() {\n  const [streamInfo, schedule] = await getStreamInfo();\n\n  return json({\n    streamInfo,\n    schedule,\n  });\n}\n\nfunction App() {\n  const { streamInfo, schedule } = useLoaderData<typeof loader>();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Layout streamInfo={streamInfo} streamSchedule={schedule}>\n          <Outlet />\n        </Layout>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n\n        <script\n          defer\n          src=\"/stats/js/script.js\"\n          data-api=\"/stats/api/event\"\n          data-domain=\"hasanhub.com\"\n        />\n      </body>\n    </html>\n  );\n}\n\nexport default App;\n", "import { Link } from \"@remix-run/react\";\nimport type { StreamInfo, StreamSchedule } from \"~/lib/getStreamInfo.server\";\n\nconst formatDate = (date: string | Date) => {\n  if (typeof date === \"string\") {\n    return (\n      new Date(date).toLocaleDateString() +\n      \" \" +\n      new Date(date).toLocaleTimeString()\n    );\n  }\n\n  return date.toLocaleDateString() + \" \" + date.toLocaleTimeString();\n};\n\nconst Header = ({\n  streamInfo,\n  streamSchedule,\n}: {\n  streamInfo: StreamInfo;\n  streamSchedule: StreamSchedule;\n}) => {\n  return (\n    <header className=\"px-5 lg:px-10 xl:px-14 my-6  gap-y-10 gap-x-5 grid grid-cols-1 grid-rows-[auto_auto_auto] sm:grid-cols-2 sm:grid-rows-[auto_auto] xl:grid-rows-1 lg:grid-cols-[25%_auto] xl:grid-cols-[20%_auto_auto]\">\n      <Link\n        to=\"/\"\n        prefetch=\"render\"\n        className=\"col-span-1 sm:col-span-1 flex items-center justify-center sm:justify-start\"\n      >\n        <h1 className=\"text-[2.5rem] font-bold sm:text-left group text-center inline-block w-min whitespace-nowrap\">\n          <span>Hasan</span>\n          <span className=\"dark:text-lightBlack text-light inline-block bg-twitchPurpleLight group-hover:bg-twitchPurple px-2 py-1 ml-2 rounded-lg saturate-50\">\n            Hub\n          </span>\n        </h1>\n      </Link>\n\n      <div className=\"col-span-1 row-start-3 sm:col-span-2 sm:row-start-2 xl:row-start-1 xl:col-start-2 xl:col-span-1 w-full  xl:max-w-[60ch] flex items-center justify-center xl:justify-start text-center xl:text-left text-base md:text-lg\">\n        {streamInfo.data?.length > 0 ? (\n          <a\n            className=\"hover:text-twitchPurple dark:hover:text-twitchPurpleLight saturate-50\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={`https://twitch.tv/${streamInfo.data[0][\"user_login\"]}`}\n          >\n            <p className=\"\">\n              <strong className=\"text-twitchPurple dark:text-twitchPurpleLight saturate-50\">\n                {streamInfo.data[0][\"user_name\"]}\n              </strong>{\" \"}\n              is live now: <br />\"{streamInfo.data[0][\"title\"]}\"\n            </p>\n          </a>\n        ) : (\n          streamSchedule.data && (\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"hover:text-twitchPurple dark:hover:text-twitchPurpleLight saturate-50\"\n              href={`https://twitch.tv/${streamSchedule.data[\"broadcaster_login\"]}`}\n            >\n              <p>\n                <strong className=\"text-twitchPurple dark:text-twitchPurpleLight saturate-50\">\n                  {streamSchedule.data?.[\"broadcaster_name\"]}\n                </strong>{\" \"}\n                is live at{\" \"}\n                <strong className=\"text-twitchPurple dark:text-twitchPurpleLight saturate-50\">\n                  {formatDate(\n                    streamSchedule.data?.[\"segments\"][0][\"start_time\"]\n                  )}\n                </strong>{\" \"}\n                <br />\"{streamSchedule.data?.[\"segments\"][0][\"title\"]}\".\n              </p>\n            </a>\n          )\n        )}\n      </div>\n\n      <div className=\"col-span-1 row-start-2 sm:row-start-1 sm:col-start-2 sm:col-span-1 xl:col-start-3 flex flex-row gap-2 justify-center md:justify-end items-center text-sm md:text-base\">\n        <a\n          href=\"https://twitter.com/chrcit\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"bg-twitchPurpleLight saturate-50 text-light text-center font-bold betterhover:hover:bg-twitchPurple px-4 py-2 rounded\"\n        >\n          Made by @chrcit\n        </a>\n        <a\n          href=\"https://buymeacoffee.com/chrcit\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"bg-twitchPurpleLight saturate-50 text-light text-center font-bold betterhover:hover:bg-twitchPurple px-4 py-2 rounded\"\n        >\n          Buy me a coffee\n        </a>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n", "import type { StreamInfo, StreamSchedule } from \"~/lib/getStreamInfo.server\";\nimport Header from \"~/components/header\";\n\nconst Layout = ({\n  children,\n  streamInfo,\n  streamSchedule,\n}: {\n  children: React.ReactNode;\n  streamInfo: StreamInfo;\n  streamSchedule: StreamSchedule;\n}) => {\n  return (\n    <>\n      <Header streamInfo={streamInfo} streamSchedule={streamSchedule} />\n      <main className=\"mx-auto items-start px-0 lg:px-10 xl:px-14\">\n        {children}\n      </main>\n    </>\n  );\n};\n\nexport default Layout;\n", "export type StreamInfo = {\n    data: {\n        id: string;\n        user_id: string;\n        user_login: string;\n        user_name: string;\n        game_id: string;\n        game_name: string;\n        type: string;\n        title: string;\n        viewer_count: number;\n        started_at: Date;\n        language: string;\n        thumbnail_url: string;\n        tag_ids: string[];\n        is_mature: boolean;\n    }[];\n    pagination: {\n        cursor: string\n    };\n}\n\nexport type StreamSchedule = {\n    data: {\n        segments: {\n            id: string;\n            start_time: Date;\n            end_time: Date;\n            title: string;\n            canceled_until?: any;\n            category: {\n                id: string;\n                name: string;\n            };\n            is_recurring: boolean;\n        }[];\n        broadcaster_id: string;\n        broadcaster_name: string;\n        broadcaster_login: string;\n        vacation?: any;\n    };\n    pagination: {};\n}\n\n\nexport const getStreamInfo = async () => {\n    return await Promise.all([\n      fetch(`https://api.twitch.tv/helix/streams?first=1&user_id=${207813352}`, {\n        headers: {\n          \"Client-Id\": process.env.TWITCH_CLIENT_ID?.trim() ?? \"\",\n          \"Authorization\": `Bearer ${process.env.TWITCH_ACCESS_TOKEN ?? \"\"}`,\n        },\n      }).then((res) => res.json()) as unknown as StreamInfo,\n      fetch(`https://api.twitch.tv/helix/schedule?broadcaster_id=${207813352}`, {\n        headers: {\n          \"Client-Id\": process.env.TWITCH_CLIENT_ID?.trim() ?? \"\",\n          \"Authorization\": `Bearer ${process.env.TWITCH_ACCESS_TOKEN ?? \"\"}`,\n        },\n      }).then((res) => res.json())  as unknown as StreamSchedule,\n    ]);\n  };", "import type { Tag } from \"@prisma/client\";\nimport { json } from \"@remix-run/node\";\nimport { prisma } from \"~/utils/prisma.server\";\n\ntype TagsForSidebar = (Tag & { viewsCount: number })[];\n\nexport async function loader(): Promise<TagsForSidebar> {\n  return json(\n    await prisma.$queryRaw`\n      SELECT t.*, sum(v.views) AS view_count\n      FROM Tag t\n        JOIN TagVideo tv ON tv.tagId = t.id\n        JOIN Video v ON tv.videoId = v.id\n      GROUP BY t.id\n      ORDER BY view_count DESC\n    `,\n    {\n      status: 200,\n      headers: {\n        \"cache-control\": `public, max-age=${60 * 60 * 24}, s-maxage=${\n          60 * 60 * 24\n        }, stale-while-revalidate=${60 * 60 * 24 * 7}`,\n      },\n    }\n  ) as unknown as TagsForSidebar;\n}\n", "// app/utils/prisma.server.ts\nimport { PrismaClient } from \"@prisma/client\";\n\nlet prisma: PrismaClient;\ndeclare global {\n  var __db: PrismaClient | undefined;\n}\n\nif (process.env.NODE_ENV === \"production\") {\n  prisma = new PrismaClient();\n  prisma.$connect();\n} else {\n  if (!global.__db) {\n    global.__db = new PrismaClient({\n      log: [\"query\", \"info\", \"warn\", \"error\"],\n    });\n    global.__db.$connect();\n  }\n  prisma = global.__db;\n}\n\nexport { prisma };\n", "import { json } from \"@remix-run/node\";\nimport { decode } from \"html-entities\";\nimport { getChannel } from \"~/sync/clients/youtubeRss.server\";\nimport { prisma } from \"~/utils/prisma.server\";\n\nexport async function loader({ params }) {\n  try {\n    const [channels, playlists, videos] = await Promise.all([\n      prisma.channel.findMany({\n        select: { id: true, youtubeId: true, title: true },\n      }),\n      prisma.playlist.findMany(),\n      prisma.video.findMany({\n        select: { id: true, youtubeId: true },\n      }),\n    ]);\n\n    const videosYoutubeIds = videos.map((video) => video.youtubeId);\n\n    const meta = await Promise.all([\n      ...channels.map(async (channel) => {\n        const channelResponse = await getChannel(channel.youtubeId);\n\n        const updated = await prisma.$transaction(\n          channelResponse.items\n            .filter((item) => !videosYoutubeIds.includes(item.id))\n            .map((video) =>\n              prisma.video.upsert({\n                where: { youtubeId: video.id },\n                update: {},\n                create: {\n                  title: decode(video.title),\n                  youtubeId: video.id,\n                  publishedAt: video.pubDate,\n                  channel: { connect: { id: channel.id } },\n                },\n              })\n            )\n        );\n\n        return { channel: { title: channel.title }, videos: updated };\n      }),\n    ]);\n\n    return json(\n      meta.map((info) => {\n        return {\n          title: info.channel.title,\n          synced: info.videos.length,\n          items: info.videos.map((video) => video.title),\n        };\n      })\n    );\n  } catch (e) {\n    return json({ error: e }, 500);\n  } finally {\n    prisma.$disconnect();\n  }\n}\n", "import Parser from \"rss-parser\";\nimport { YTRSSChannelResponseValidator } from \"../validators/youtubeRss.server\";\n\nconst parser = new Parser();\n\nexport const videoUrl = (youtubeId: string) =>\n  `https://www.youtube.com/watch?v=${youtubeId}`;\nexport const channelUrl = (youtubeId: string) =>\n  `https://www.youtube.com/channel/${youtubeId}`;\nexport const feedUrl = (youtubeId: string) =>\n  `https://www.youtube.com/feeds/videos.xml?channel_id=${youtubeId}`;\n\nexport const getChannel = async (youtubeId: string) => {\n  const rssResponse = await parser.parseURL(feedUrl(youtubeId));\n  const channelResponse = YTRSSChannelResponseValidator.parse(rssResponse);\n\n  return {\n    channel: {\n      title: channelResponse.title,\n      link: channelResponse.link,\n      feedUrl: channelResponse.feedUrl,\n    },\n    items: channelResponse.items,\n  };\n};\n", "import { z } from \"zod\";\n\nexport type YTRSSItemSnippetType = z.infer<typeof YTRSSItemSnippetValidator>;\nexport const YTRSSItemSnippetValidator = z.object({\n  title: z.string(),\n  link: z.string(),\n  pubDate: z.string().transform((v) => new Date(v)),\n  author: z.string(),\n  id: z.string().transform((v) => v.replace(/^yt:video:/, \"\")),\n  isoDate: z.string().transform((v) => new Date(v)),\n});\n\nexport type YTRSSItemListType = z.infer<typeof YTRSSItemListValidator>;\nexport const YTRSSItemListValidator = z.array(YTRSSItemSnippetValidator);\n\nexport const YTRSSChannelResponseValidator = z.object({\n  title: z.string(),\n  items: YTRSSItemListValidator,\n  link: z.string().url(),\n  feedUrl: z.string().url(),\n});\n", "import { prisma } from \"~/utils/prisma.server\";\nimport { json } from \"@remix-run/node\";\nimport { getChannel } from \"../../sync/clients/youtubeApi.server\";\nimport { PublishStatus } from \"@prisma/client\";\nimport type { YoutubeChannel } from \"youtube.ts\";\nimport { debug } from \"~/utils/debug.server\";\n\nexport async function loader({ params }) {\n  try {\n    const [channels, playlists] = await Promise.all([\n      prisma.channel.findMany(),\n      prisma.playlist.findMany(),\n    ]);\n\n    debug(`# of Channels to be synced: ${channels.length}`);\n\n    const channelsResponse = await Promise.all(\n      channels.map(async (video) => {\n        try {\n          return await getChannel(video.youtubeId);\n        } catch (e) {\n          debug(`Video with ID ${video.youtubeId} could not be found.`);\n          debug(`Video will be marked as unpublished.`);\n\n          await prisma.channel.update({\n            where: { id: video.id },\n            data: {\n              publishStatus: PublishStatus.Unpublished,\n            },\n          });\n\n          return null;\n        }\n      })\n    );\n\n    const channelsData = channelsResponse.filter(\n      (channel) => channel !== null\n    ) as YoutubeChannel[];\n\n    debug(`# of Channels found: ${channelsData.length}`);\n\n    const updated = await prisma.$transaction(\n      channelsData.map((channelData, index) => {\n        return prisma.channel.update({\n          where: { youtubeId: channelData.id },\n          data: {\n            title: channelData.snippet.title,\n            description: channelData.snippet.description,\n            publishedAt: channelData.snippet.publishedAt,\n            smallThumbnailUrl: channelData.snippet.thumbnails.default.url,\n            mediumThumbnailUrl: channelData.snippet.thumbnails.medium.url,\n            largeThumbnailUrl: channelData.snippet.thumbnails.high.url,\n            publishStatus: PublishStatus.Published,\n          },\n        });\n      })\n    );\n\n    debug(`# of Channels updated: ${updated.length}`);\n    return json({ channelsSynced: updated.length });\n  } catch (error) {\n    return json({ error }, 500);\n  } finally {\n    prisma.$disconnect();\n  }\n}\n", "import Youtube from \"youtube.ts\";\n\nconst client = new Youtube(process.env.YOUTUBE_API_KEY);\n\nexport const getChannel = async (youtubeId: string) => {\n  return client.channels.get(youtubeId);\n};\n\nexport const getVideo = async (youtubeId: string) => {\n  return client.videos.get(`https://www.youtube.com/watch?v=${youtubeId}`);\n};\n\nexport const getChannelVideos = async (\n  youtubeId: string,\n  pageToken?: string\n) => {\n  return client.videos.search({ channelId: youtubeId, pageToken });\n};\n", "export const debug = (message: any) => {\n  if (process.env.NODE_ENV === \"development\") {\n    console.log(message);\n  }\n};\n", "import type { Video } from \"@prisma/client\";\nimport { PublishStatus, VideoSyncStatus } from \"@prisma/client\";\nimport { json } from \"@remix-run/node\";\nimport type { YoutubeVideoSearchItem } from \"youtube.ts\";\nimport { z } from \"zod\";\nimport { getChannelVideos } from \"~/sync/clients/youtubeApi.server\";\nimport { prisma } from \"~/utils/prisma.server\";\nimport { debug } from \"~/utils/debug.server\";\nimport { matchTagWithVideos } from \"~/sync/services/matching\";\nimport { decode } from \"html-entities\";\n\nexport async function loader({ request }) {\n  const url = new URL(request.url);\n  let id = z.string().parse(url.searchParams.get(\"id\"));\n\n  debug(`Channel ID: ${id}`);\n  const [channel, channelVideos] = await Promise.all([\n    prisma.channel.findUnique({\n      where: { youtubeId: id },\n    }),\n    getVideosFromChannel(id),\n  ]);\n\n  if (channel === null) {\n    debug(`Channel with Youtube ID = '${id}' not found.`);\n    return json({ error: \"Channel not found.\" });\n  }\n\n  debug(\n    `Channel '${channel.title}' with Youtube ID = '${channel.youtubeId}' will be synced.`\n  );\n\n  let nextPageToken;\n  let videosResponse: YoutubeVideoSearchItem[] = [];\n  let response;\n  do {\n    response = await getChannelVideos(channel.youtubeId, nextPageToken);\n    videosResponse = videosResponse.concat(response.items);\n\n    nextPageToken = response.nextPageToken;\n  } while (nextPageToken);\n\n  debug(`${videosResponse.length} videos from channel fetched.`);\n\n  const newVideosResponse = filterVideos(videosResponse, channelVideos);\n\n  debug(`${newVideosResponse.length} new videos found.`);\n\n  try {\n    const transactions = newVideosResponse.map((videoData) => {\n      return prisma.video.upsert({\n        where: { youtubeId: videoData.id.videoId },\n        update: {},\n        create: {\n          title: decode(videoData.snippet.title),\n          youtubeId: videoData.id.videoId,\n          description: decode(videoData.snippet.description),\n          publishedAt: videoData.snippet.publishedAt,\n          smallThumbnailUrl: videoData.snippet.thumbnails.default.url,\n          mediumThumbnailUrl: videoData.snippet.thumbnails.medium.url,\n          largeThumbnailUrl: videoData.snippet.thumbnails.high.url,\n          syncStatus: VideoSyncStatus.Snippet,\n          publishStatus: PublishStatus.Published,\n          channelId: channel.id,\n        },\n      });\n    });\n\n    const newVideos = await batchTransactions(transactions, 50);\n\n    debug(newVideos.length);\n\n    if (newVideos.length > 0) {\n      const tags = await prisma.tag.findMany();\n\n      await Promise.all(\n        tags.map(async (tag) => {\n          const matchedVideos = matchTagWithVideos(tag, newVideos);\n          debug(`${tag.name} matched ${matchedVideos.length} videos`);\n\n          await prisma.tag.update({\n            where: { id: tag.id },\n            data: {\n              lastedMatchedAt: new Date(),\n              videos: {\n                createMany: {\n                  data: matchedVideos.map((matchedVideo) => ({\n                    videoId: matchedVideo.id,\n                  })),\n                  skipDuplicates: true,\n                },\n              },\n            },\n          });\n        })\n      );\n    }\n\n    debug(`${newVideos.length} videos added.`);\n\n    return json({ videos: newVideos.length });\n  } catch (e) {\n    debug(e);\n    return json({ error: e });\n  } finally {\n    prisma.$disconnect();\n  }\n}\n\nconst getVideosFromChannel = async (youtubeId: string): Promise<string[]> => {\n  const videos = await prisma.video.findMany({\n    where: {\n      channel: {\n        youtubeId: youtubeId,\n      },\n    },\n    orderBy: { publishedAt: \"desc\" },\n    select: { youtubeId: true },\n  });\n\n  if (videos === null) {\n    return [];\n  } else {\n    return videos.map((video) => video.youtubeId);\n  }\n};\n\n// Filter out videos which are already in database\nconst filterVideos = (\n  videos: YoutubeVideoSearchItem[],\n  latestVideos: string[]\n) => {\n  return videos.filter((video) => {\n    return !latestVideos.includes(video.id.videoId);\n  });\n};\n\nconst batchTransactions = async (\n  videos: ReturnType<typeof prisma.video.create>[],\n  batchSize: number\n) => {\n  const batches: typeof videos[] = [];\n  for (let i = 0; i < videos.length; i += batchSize) {\n    batches.push(videos.slice(i, i + batchSize));\n  }\n\n  let transactionResults: Video[] = [];\n  for (const batch of batches) {\n    transactionResults = transactionResults.concat(\n      await prisma.$transaction(batch)\n    );\n  }\n\n  return transactionResults;\n};\n", "import type { Tag, Video } from \"@prisma/client\";\n\nexport const matchTagWithVideos = (tag: Tag, videos: Video[]) => {\n  const synonyms = tag.synonyms.split(\",\");\n\n  return videos.filter((video) => {\n    const sanitizedTitle: string = video.title\n      .toLowerCase()\n      .replace(/[('s)]g/, \"\")\n      .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n\n    return synonyms.some((synonym) => {\n      return (\n        splitMyString(sanitizedTitle, 1).includes(synonym) ||\n        splitMyString(sanitizedTitle, 2).includes(synonym)\n      );\n    });\n  });\n};\n\nconst splitMyString = (str: string, splitLength: number) => {\n  const words = str.split(/\\s+/);\n  const result = [];\n\n  for (let i = 0; i + splitLength <= words.length; i += 1) {\n    result.push(words.slice(i, i + splitLength).join(\" \"));\n  }\n\n  return result;\n\n  //   let a = str.split(\" \"),\n  //     b = [];\n\n  //     a = a.filter(function (e) {\n  //     return e.length > 0;\n  //   });\n\n  //   while (a.length) b.push(a.splice(0, splitLength).join(\" \"));\n  //   return b;\n};\n", "import { prisma } from \"~/utils/prisma.server\";\nimport { json } from \"@remix-run/node\";\nimport { getVideo } from \"../../sync/clients/youtubeApi.server\";\nimport { PublishStatus, VideoSyncStatus } from \"@prisma/client\";\nimport { parse, toSeconds } from \"iso8601-duration\";\nimport type { YoutubeVideo } from \"youtube.ts\";\nimport { debug } from \"~/utils/debug.server\";\nimport { decode } from \"html-entities\";\nimport type { Video } from \"@prisma/client\";\n\nconst minute = 1000 * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\n\nexport async function loader({ params }) {\n  try {\n    const videos = await prisma.video.findMany({\n      where: {\n        OR: [\n          { syncStatus: VideoSyncStatus.Snippet },\n          {\n            AND: [\n              { publishedAt: { gt: new Date(Date.now() - day) } }, // published in the last day\n              { updatedAt: { lt: new Date(Date.now() - hour) } }, // but not updated in the last hour\n            ],\n          },\n          {\n            AND: [\n              { publishedAt: { gt: new Date(Date.now() - week) } }, // published in the last week\n              { updatedAt: { lt: new Date(Date.now() - day) } }, // but not updated in the last day\n            ],\n          },\n          {\n            AND: [\n              { publishedAt: { gt: new Date(Date.now() - week * 4) } }, // published in the last 4 weeks\n              { updatedAt: { lt: new Date(Date.now() - week) } }, // but not updated in the last week\n            ],\n          },\n          {\n            AND: [\n              { publishedAt: { gt: new Date(Date.now() - week * 12) } }, // published in the last 12 weeks\n              { updatedAt: { lt: new Date(Date.now() - week * 4) } }, // but not updated in the last 4 week\n            ],\n          },\n        ],\n      },\n      orderBy: {\n        publishedAt: \"desc\",\n      },\n      take: 75,\n    });\n\n    debug(`# of Videos to be synced: ${videos.length}`);\n\n    const videosResponse = await Promise.all(\n      videos.map(async (video) => {\n        try {\n          return await getVideo(video.youtubeId);\n        } catch (e) {\n          debug(`Video with ID ${video.youtubeId} could not be found.`);\n          debug(`Video will be marked as unpublished.`);\n          debug(e?.message);\n\n          await prisma.video.update({\n            where: { id: video.id },\n            data: {\n              publishStatus: PublishStatus.Unpublished,\n            },\n          });\n\n          return null;\n        }\n      })\n    );\n\n    const videosData = videosResponse.filter(\n      (video) => video !== null\n    ) as YoutubeVideo[];\n\n    debug(`# of Videos found: ${videosData.length}`);\n\n    const updated = await prisma.$transaction(\n      videosData.map((videoData, index) => {\n        return prisma.video.update({\n          where: { youtubeId: videoData.id },\n          data: {\n            title: decode(videoData.snippet.title),\n            description: decode(videoData.snippet.description),\n            publishedAt: videoData.snippet.publishedAt,\n            smallThumbnailUrl: videoData.snippet.thumbnails.default.url,\n            mediumThumbnailUrl: videoData.snippet.thumbnails.medium.url,\n            largeThumbnailUrl: videoData.snippet.thumbnails.high.url,\n            xlThumbnailUrl: videoData.snippet.thumbnails.standard?.url,\n            xxlThumbnailUrl: videoData.snippet.thumbnails.maxres?.url,\n            comments: isNaN(parseInt(videoData.statistics.commentCount))\n              ? null\n              : parseInt(videoData.statistics.commentCount),\n            views: isNaN(parseInt(videoData.statistics.viewCount))\n              ? null\n              : parseInt(videoData.statistics.viewCount),\n            likes: isNaN(parseInt(videoData.statistics.likeCount))\n              ? null\n              : parseInt(videoData.statistics.likeCount),\n            duration:\n              toSeconds(parse(videoData.contentDetails.duration)) ?? null,\n            syncStatus: VideoSyncStatus.Full,\n            publishStatus: PublishStatus.Published,\n          },\n        });\n      })\n    );\n\n    debug(`# of Videos updated: ${updated.length}`);\n    return json({\n      fetched: videos.length,\n      found: videosData.length,\n      synced: updated.length,\n    });\n  } catch (error) {\n    debug(error);\n    return json({ error }, 500);\n  } finally {\n    prisma.$disconnect();\n  }\n}\n\nconst batchTransactions = async (\n  videos: ReturnType<typeof prisma.video.update>[],\n  batchSize: number\n) => {\n  const batches: typeof videos[] = [];\n  for (let i = 0; i < videos.length; i += batchSize) {\n    batches.push(videos.slice(i, i + batchSize));\n  }\n\n  let transactionResults: Video[] = [];\n  for (const batch of batches) {\n    transactionResults = transactionResults.concat(\n      await prisma.$transaction(batch)\n    );\n  }\n\n  return transactionResults;\n};\n", "import { prisma } from \"~/utils/prisma.server\";\n\nexport const loader = async () => {\n  const BASE_URL = \"https://hasanhub.com\";\n\n  const tags = await prisma.tag.findMany();\n\n  const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n        <url>\n            <loc>${BASE_URL}/</loc>\n            <lastmod>${new Date().toISOString()}</lastmod>\n            <changefreq>daily</changefreq>\n            <priority>1.0</priority>\n        </url>  \n    ${tags.map((tag) => {\n      return `\n        <url>\n            <loc>${BASE_URL}/tags/${tag.slug}</loc>\n            <lastmod>${new Date().toISOString()}</lastmod>\n            <changefreq>daily</changefreq>\n            <priority>1.0</priority>\n        </url>\n            `;\n    })}\n    </urlset>\n  `;\n\n  return new Response(sitemap, {\n    status: 200,\n    headers: {\n      \"cache-control\": \"max-age=0, s-maxage=86400\",\n      \"Content-Type\": \"application/xml\",\n      \"xml-version\": \"1.0\",\n      encoding: \"UTF-8\",\n    },\n  });\n};\n", "import { prisma } from \"~/utils/prisma.server\";\nimport { json } from \"@remix-run/node\";\nimport { debug } from \"~/utils/debug.server\";\nimport { matchTagWithVideos } from \"~/sync/services/matching\";\nimport type { Tag } from \"@prisma/client\";\n\nexport async function loader({ params }) {\n  try {\n    const [tags, videos] = await Promise.all([\n      prisma.tag.findMany(),\n      prisma.video.findMany(),\n    ]);\n\n    let taggedVideos: { [key: string]: number } = {};\n    await batchTransactions(\n      tags.map((tag) => {\n        const filteredVideos = videos.filter((video) => {\n          if (tag.lastedMatchedAt === null || video.publishedAt === null) {\n            return true;\n          }\n\n          return video.createdAt >= tag.lastedMatchedAt;\n        });\n\n        debug(`Videos for ${tag.name} filtered: ${filteredVideos.length}, `);\n\n        const matchedVideos = matchTagWithVideos(tag, filteredVideos);\n        taggedVideos[tag.name] = matchedVideos.length;\n\n        debug(`${tag.name} matched ${matchedVideos.length} videos`);\n\n        if (matchedVideos.length > 0) {\n          return prisma.tag.update({\n            where: { id: tag.id },\n            data: {\n              lastedMatchedAt: new Date(),\n              videos: {\n                createMany: {\n                  data: matchedVideos.map((matchedVideo) => ({\n                    videoId: matchedVideo.id,\n                  })),\n                  skipDuplicates: true,\n                },\n              },\n            },\n          });\n        } else {\n          return prisma.tag.update({\n            where: { id: tag.id },\n            data: {\n              lastedMatchedAt: new Date(),\n            },\n          });\n        }\n      }),\n      10\n    );\n\n    return json(taggedVideos);\n  } catch (e) {\n    debug(e);\n    return json({ error: e }, 500);\n  } finally {\n    prisma.$disconnect();\n  }\n}\n\nconst batchTransactions = async (\n  tags: ReturnType<typeof prisma.tag.update>[],\n  batchSize: number\n) => {\n  const batches: typeof tags[] = [];\n  for (let i = 0; i < tags.length; i += batchSize) {\n    batches.push(tags.slice(i, i + batchSize));\n  }\n\n  let transactionResults: Tag[] = [];\n  for (const batch of batches) {\n    console.log(batch.length);\n    transactionResults = transactionResults.concat(\n      await prisma.$transaction(batch)\n    );\n  }\n\n  return transactionResults;\n};\n", "export const loader = async () => {\n  const block = `Sitemap: https://hasanhub.com/sitemap.xml\nAllow: /$\nAllow: /tags/*/$\nDisallow: /tags/*/*`;\n\n  const robotText = `\nUser-agent: Googlebot\n${block}\n\nUser-agent: Yandex\n${block}\n\nUser-agent: *\n${block}\n        `;\n  // return the text content, a status 200 success response, and set the content type to text/plain\n  return new Response(robotText, {\n    status: 200,\n    headers: {\n      \"cache-control\": \"max-age=0, s-maxage=86400\",\n      \"Content-Type\": \"text/plain\",\n    },\n  });\n};\n", "import type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Outlet, useLoaderData } from \"@remix-run/react\";\nimport Sidebar from \"~/components/sidebar\";\nimport useUrlState from \"~/hooks/useUrlState\";\nimport { TagSlugsValidator } from \"~/lib/getVideos\";\nimport { prisma } from \"~/utils/prisma.server\";\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const slugs = params[\"*\"]?.split(\"/\") ?? [];\n\n  try {\n    const data = await prisma.$queryRaw`\n      SELECT t.*, sum(v.views) AS view_count\n      FROM Tag t\n        JOIN TagVideo tv ON tv.tagId = t.id\n        JOIN Video v ON tv.videoId = v.id\n      GROUP BY t.id\n      ORDER BY view_count DESC\n    `;\n    const tagSlugs = TagSlugsValidator.parse(slugs);\n\n    return json(\n      {\n        tags: data,\n        tagSlugs,\n      },\n      {\n        status: 200,\n        headers: {\n          \"cache-control\": `public, max-age=${60 * 60 * 24}, s-maxage=${\n            60 * 60 * 24\n          }, stale-while-revalidate=${60 * 60 * 24 * 7}`,\n        },\n      }\n    );\n  } catch (e) {\n    return json({ error: e });\n  }\n};\n\nexport default function VideosLayout() {\n  const { tags } = useLoaderData();\n  const { durations, tagSlugs } = useUrlState();\n  return (\n    <div className=\"flex flex-col lg:flex-row relative lg:gap-14\">\n      <Sidebar\n        tags={tags}\n        activeTagSlugs={tagSlugs}\n        durationFilter={durations}\n      />\n\n      <Outlet />\n    </div>\n  );\n}\n", "import cx from \"classnames\";\nimport { Link } from \"@remix-run/react\";\n\nconst TagButton = ({\n  label,\n  active = false,\n  styleVariant = \"sidebar\",\n  href,\n}: {\n  href: string;\n  active?: boolean;\n  label: string;\n  styleVariant: \"sidebar\" | \"taglist\";\n}) => {\n  return (\n    <>\n      <div className=\"min-w-max\">\n        <Link\n          to={href}\n          className={cx(\n            \"border-twitchPurpleLight duration-400 transition-colors border  betterhover:hover:bg-twitchPurple betterhover:hover:text-light inline-block rounded-lg saturate-50 \",\n            styleVariant === \"sidebar\"\n              ? \"text-base px-3 py-2\"\n              : \"text-base px-2 py-1\",\n            active\n              ? \"bg-twitchPurpleLight text-light\"\n              : \"bg-light dark:bg-lightBlack text-twitchPurpleLight\"\n          )}\n        >\n          {label}\n        </Link>\n      </div>\n    </>\n  );\n};\n\nexport default TagButton;\n", "import { useLocation, useSearchParams, useTransition } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport type {\n  LastVideoIdType,\n  DurationListType,\n  OrderByType,\n  OrderDirectionType,\n} from \"../utils/validators\";\nimport { UrlParamsSchema, DurationListValidator } from \"../utils/validators\";\n\nconst getTagSlugsFromPathname = (location?: string | null) => {\n  if (location === null || location === undefined) {\n    return [];\n  }\n\n  return location.replace(\"/tags/\", \"\").split(\"/\");\n};\n\ntype UrlStateType = {\n  tagSlugs: string[];\n  lastVideoId?: LastVideoIdType;\n  durations?: DurationListType;\n  ordering: {\n    by: OrderByType;\n    order: OrderDirectionType;\n  };\n};\n\nconst useUrlState = () => {\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n\n  const [urlState, setUrlState] = useState<UrlStateType>({\n    tagSlugs: getTagSlugsFromPathname(location?.pathname),\n    durations:\n      DurationListValidator.parse(searchParams.getAll(\"durations\")) ?? null,\n    ordering: {\n      order: \"desc\",\n      by: \"publishedAt\",\n    },\n  });\n\n  const transition = useTransition();\n\n  useEffect(() => {\n    const nextSearchParams = new URLSearchParams(transition.location?.search);\n\n    let lastVideoIdParam = searchParams.get(\"lastVideoId\");\n    let nextLastVideoIdParam = nextSearchParams.get(\"lastVideoId\");\n\n    const tagSlugs = getTagSlugsFromPathname(location?.pathname);\n    const nextTagSlugs = getTagSlugsFromPathname(\n      transition?.location?.pathname\n    );\n\n    const { order, durations, by, lastVideoId } = UrlParamsSchema.parse({\n      order: searchParams.get(\"order\") ?? undefined,\n      durations: searchParams.getAll(\"durations\"),\n      by: searchParams.get(\"by\") ?? undefined,\n      lastVideoId: lastVideoIdParam ? parseInt(lastVideoIdParam) : undefined,\n    });\n\n    const {\n      order: nextOrder,\n      durations: nextDurations,\n      by: nextBy,\n      lastVideoId: nextLastVideoId,\n    } = UrlParamsSchema.parse({\n      order: nextSearchParams.get(\"order\") ?? undefined,\n      durations: nextSearchParams.getAll(\"durations\"),\n      by: nextSearchParams.get(\"by\") ?? undefined,\n      lastVideoId: nextLastVideoIdParam\n        ? parseInt(nextLastVideoIdParam)\n        : undefined,\n    });\n\n    setUrlState({\n      durations: nextDurations?.length !== 0 ? nextDurations : durations,\n      ordering: {\n        order: nextOrder ?? order ?? \"desc\",\n        by: nextBy ?? by ?? \"publishedAt\",\n      },\n      lastVideoId: nextLastVideoId ?? lastVideoId,\n      tagSlugs: nextTagSlugs.length !== 0 ? nextTagSlugs : tagSlugs,\n    });\n  }, [location, transition.location, searchParams]);\n\n  return {\n    isLoading: transition.state === \"loading\",\n    ...urlState,\n  };\n};\n\nexport default useUrlState;\n", "import { z } from \"zod\";\n\nexport type DurationType = z.infer<typeof DurationValidator>;\nexport const DurationValidator = z.enum([\n  \"short\",\n  \"medium\",\n  \"long\",\n  \"extralong\",\n]);\n\nexport type DurationListType = z.infer<typeof DurationListValidator>;\nexport const DurationListValidator = z.array(DurationValidator, {\n  invalid_type_error: \"durationList must be an array of strings\",\n});\n\nexport type OrderDirectionType = z.infer<typeof OrderDirectionValidator>;\nexport const OrderDirectionValidator = z.optional(z.enum([\"asc\", \"desc\"]));\n\nexport type LastVideoIdType = z.infer<typeof LastVideoIdValidator>;\nexport const LastVideoIdValidator = z.optional(\n  z.number({\n    invalid_type_error: \"lastVideoId must be a number\",\n  })\n);\n\nexport type OrderByType = z.infer<typeof OrderByValdiator>;\nexport const OrderByValdiator = z.optional(z.enum([\"publishedAt\", \"views\"]));\n\nexport const UrlParamsSchema = z.object({\n  durations: z.optional(DurationListValidator),\n  order: OrderDirectionValidator,\n  by: OrderByValdiator,\n  lastVideoId: LastVideoIdValidator,\n});\n", "import useUrlState from \"~/hooks/useUrlState\";\nimport type { DurationType } from \"~/utils/validators\";\nimport type { OrderByType, OrderDirectionType } from \"../utils/validators\";\n\nconst useActionUrl = () => {\n  const current = useUrlState();\n\n  const constructUrl = (\n    action: {\n      tagSlugs?: string[];\n      durations?: DurationType[];\n      ordering?: { by?: OrderByType; order?: OrderDirectionType };\n      lastVideoId?: number;\n    },\n    index = false\n  ) => {\n    let merged = {\n      ...current,\n      ...action,\n    };\n    merged.tagSlugs = merged?.tagSlugs?.filter(Boolean);\n    merged.durations = merged?.durations?.filter(Boolean);\n\n    const basePath =\n      merged.tagSlugs.length > 0\n        ? `/tags/${merged.tagSlugs.join(\"/\")}?`\n        : index\n        ? \"?index&\"\n        : \"/?\";\n\n    const searchParams = new URLSearchParams();\n\n    merged.durations?.forEach((duration: DurationType) => {\n      searchParams.append(\"durations\", duration);\n    });\n\n    if (merged.ordering.order && merged.ordering.order !== \"desc\") {\n      searchParams.append(\"order\", merged.ordering.order);\n    }\n\n    if (merged.ordering.by && merged.ordering.by !== \"publishedAt\") {\n      searchParams.append(\"by\", merged.ordering.by);\n    }\n\n    if (merged.lastVideoId) {\n      searchParams.append(\"lastVideoId\", merged.lastVideoId.toString());\n    }\n\n    return `${basePath}${searchParams.toString()}`;\n  };\n\n  return { current, constructUrl };\n};\n\nexport default useActionUrl;\n", "import type { Tag } from \"@prisma/client\";\nimport TagButton from \"./tagButton\";\nimport type { DurationListType, DurationType } from \"~/utils/validators\";\nimport useActionUrl from \"~/hooks/useActionUrl\";\n\nconst constructUrl = (\n  activeSlugs: string[],\n  newSlug: string | null,\n  activeDurationFilter: DurationListType | undefined,\n  newDuration: DurationType | null\n) => {\n  let slugs = activeSlugs;\n  if (newSlug) {\n    slugs = activeSlugs.includes(newSlug)\n      ? activeSlugs.filter((slug) => slug !== newSlug)\n      : [...activeSlugs, newSlug];\n    slugs = slugs.sort();\n  }\n\n  let durations: DurationListType = [];\n  if (activeDurationFilter === undefined) {\n    durations = newDuration ? [newDuration] : [];\n  } else if (newDuration) {\n    durations = activeDurationFilter.includes(newDuration)\n      ? activeDurationFilter.filter((d) => d !== newDuration)\n      : [...activeDurationFilter, newDuration];\n    durations = durations.sort();\n  }\n};\n\nconst durationFilterData: { value: DurationType; label: string }[] = [\n  { value: \"short\", label: \"< 3min\" },\n  { value: \"medium\", label: \"3-15min\" },\n  { value: \"long\", label: \"15-30min\" },\n  { value: \"extralong\", label: \"> 30 min\" },\n];\n\nconst Sidebar = ({\n  tags,\n  activeTagSlugs,\n  durationFilter,\n}: {\n  tags: Tag[];\n  activeTagSlugs: string[];\n  durationFilter: DurationListType | undefined;\n}) => {\n  return (\n    <>\n      <aside className=\"w-full lg:sticky lg:top-0 lg:w-1/4 xl:w-1/6  py-5 px-3 lg:px-0 transition-opacity duration-100\">\n        <section className=\"lg:overflow-y-auto lg:max-h-[calc(100%-2.5rem)] lg:pr-3 flex flex-col gap-y-5\">\n          {/* Time */}\n          <ul className=\"flex flex-row flex-nowrap pb-3 sm:pb-0 overflow-x-auto sm:overflow-x-visible sm:flex-wrap rounded gap-3\">\n            {durationFilterData.map(({ value, label }, index) => (\n              <li className=\"min-w-max will-fade-scale\" key={value}>\n                <DynamicTagButton\n                  type=\"duration\"\n                  label={label}\n                  active={durationFilter?.includes(value) ?? false}\n                  filter={value}\n                />\n              </li>\n            ))}\n          </ul>\n\n          {/* Tags  */}\n          <section className=\" pb-3  lg:pb-0 text-base overflow-x-auto lg:overflow-x-visible\">\n            <h2 className=\"text-2xl py-3\">Most Popular</h2>\n            <ul className=\"flex flex-row flex-wrap gap-y-3 gap-x-4 py-3 border-b\">\n              {tags?.slice(0, 12).map((tag, index) => (\n                <li className=\"min-w-max\" key={tag.id}>\n                  <DynamicTagButton\n                    type=\"tag\"\n                    label={tag.name}\n                    active={activeTagSlugs?.includes(tag.slug ?? \"\")}\n                    filter={tag.slug ?? \"\"}\n                  />\n                </li>\n              ))}\n            </ul>\n            {Object.keys(staticTagToTopicMap).map((topic) => (\n              <>\n                <details className=\"transition-all border-b open:border-b-0\">\n                  <summary className=\"cursor-pointer \">\n                    <h3 className=\"inline-block py-3 text-xl \">{topic}</h3>\n                  </summary>\n                  <ul className=\"flex flex-row flex-wrap gap-y-3 gap-x-4 py-3 px-2 border-b\">\n                    {tags\n                      ?.filter((tag) => {\n                        return staticTagToTopicMap[topic].includes(tag.name);\n                      })\n                      .map((tag, index) => (\n                        <li className=\"min-w-max\" key={tag.id}>\n                          <DynamicTagButton\n                            type=\"tag\"\n                            label={tag.name}\n                            active={activeTagSlugs?.includes(tag.slug ?? \"\")}\n                            filter={tag.slug ?? \"\"}\n                          />\n                        </li>\n                      ))}\n                  </ul>\n                </details>\n              </>\n            ))}\n\n            {/* {tags?.map((tag, index) => (\n              <li className=\"min-w-max\" key={tag.id}>\n                <DynamicTagButton\n                  type=\"tag\"\n                  label={tag.name}\n                  active={activeTagSlugs?.includes(tag.slug ?? \"\")}\n                  filter={tag.slug ?? \"\"}\n                />\n              </li>\n            ))} */}\n          </section>\n        </section>\n      </aside>\n    </>\n  );\n};\n\nconst DynamicTagButton = ({\n  label,\n  type,\n  filter,\n  active,\n}: {\n  type: \"tag\" | \"duration\";\n  label: string;\n  filter: string;\n  active: boolean;\n}) => {\n  const { current, constructUrl } = useActionUrl();\n\n  const href =\n    type === \"tag\"\n      ? constructUrl({\n          tagSlugs: addOrRemoveElement(current.tagSlugs, filter),\n          lastVideoId: undefined,\n        })\n      : constructUrl({\n          durations: addOrRemoveElement(current.durations, filter),\n          lastVideoId: undefined,\n        });\n\n  return (\n    <TagButton\n      href={href}\n      styleVariant=\"sidebar\"\n      label={label}\n      active={active}\n    />\n  );\n};\n\nconst addOrRemoveElement = (arr?: string[], element: string) => {\n  if (arr?.includes(element)) {\n    return arr.filter((e) => e !== element).sort();\n  }\n\n  return [...(arr ?? []), element].sort();\n};\n\nconst staticTagToTopicMap = {\n  React: [\n    \"React\",\n    \"TikTok\",\n    \"Jubilee\",\n    \"Cringe\",\n    \"JCS\",\n    \"CNN\",\n    \"Masterchef\",\n    \"The Button\",\n    \"Vice\",\n    \"Fox News\",\n  ],\n  Creators: [\n    \"Pokimane\",\n    \"AustinShow\",\n    \"Ludwig Ahgren\",\n    \"Myth\",\n    \"Valkyrae\",\n    \"Mizkif\",\n    \"OTV\",\n    \"Amouranth\",\n    \"Felix Biederman\",\n    \"Maya\",\n    \"Will Neff\",\n    \"JPEGMAFIA\",\n    \"Sykkuno\",\n    \"39daph\",\n    \"Grimes\",\n    \"Adin Ross\",\n    \"QTCinderella\",\n    \"Mia Malkova\",\n    \"Tubbo\",\n    \"Sneako\",\n    \"Shitcamp\",\n    \"XQC\",\n    \"JiDion\",\n    \"Andrew Callaghan\",\n    \"h3h3\",\n    \"Trainwrecks\",\n    \"Twitch\",\n    \"Fear&\",\n    \"Tim Dillon\",\n  ],\n  Gaming: [\n    \"GTA\",\n    \"Gaming\",\n    \"Rust\",\n    \"Pokemon\",\n    \"Elden Ring\",\n    \"Fortnite\",\n    \"Cyberpunk\",\n  ],\n  Politics: [\n    \"Trump\",\n    \"Joe Biden\",\n    \"Alexandria Ocasio Cortez\",\n    \"Ukraine\",\n    \"Putin\",\n    \"Police\",\n    \"Climate\",\n    \"Clinton\",\n    \"Texas\",\n    \"Bernie Sanders\",\n    \"Afghanistan\",\n    \"Homeless\",\n    \"Israel\",\n    \"Socialism\",\n    \"Covid\",\n    \"Capitalism\",\n    \"LGBT\",\n  ],\n  Hogs: [\n    \"Joe Rogan\",\n    \"Ben Shapiro\",\n    \"Jordan Peterson\",\n    \"Tucker Carlson\",\n    \"Steven Crowder\",\n    \"Kyle Rittenhouse\",\n    \"Hunter Biden\",\n    \"Rudy Giuliani\",\n    \"Libs of TikTok\",\n    \"Alex Jones\",\n    \"Charlie Kirk\",\n    \"Christian Walker\",\n    \"Tim Pool\",\n    \"Hogwatch\",\n    \"James Lindsay\",\n    \"CRT\",\n  ],\n  Popculture: [\n    \"Johnny Depp\",\n    \"Amber Heard\",\n    \"Dave Chappelle\",\n    \"Kanye West\",\n    \"Elon Musk\",\n    \"Crypto/NFTs\",\n    \"r/place\",\n  ],\n  \"PUA / Manosphere\": [\"Incel\", \"Andrew Tate\"],\n  \"Community / Parasocial\": [\"Hank Pecker\", \"Chadvice\", \"Sex\", \"Coachella\"],\n  Other: [\"IRL\", \"Rants\"],\n};\n\nexport default Sidebar;\n", "import { z } from \"zod\";\nimport { prisma } from \"~/utils/prisma.server\";\nimport type { DurationListType, LastVideoIdType } from \"~/utils/validators\";\nimport {\n  DurationListValidator,\n  LastVideoIdValidator,\n  OrderByValdiator,\n  OrderDirectionValidator,\n} from \"~/utils/validators\";\nimport type { PublishStatus, VideoSyncStatus } from \"@prisma/client\";\n\nexport const TagSlugsValidator = z.optional(z.array(z.string()));\n\nconst TakeValidator = z.optional(\n  z.number({\n    invalid_type_error: \"take must be a number\",\n  })\n);\n\ntype GetVideosArgs = z.infer<typeof GetVideosValidator>;\n\nconst GetVideosValidator = z.object({\n  tagSlugs: TagSlugsValidator,\n  take: TakeValidator,\n  by: OrderByValdiator,\n  order: OrderDirectionValidator,\n  durations: z.optional(DurationListValidator),\n  lastVideoId: LastVideoIdValidator,\n});\n\nconst getVideos = async (params: GetVideosArgs) => {\n  const { order, durations, by, lastVideoId, tagSlugs, take } =\n    GetVideosValidator.parse(params);\n\n  let conditions: {\n    tags?: object;\n    publishedAt?: object;\n    views?: object;\n    likes?: object;\n    OR?: Array<object>;\n    disabled: boolean;\n    syncStatus: typeof VideoSyncStatus.Full;\n    publishStatus: typeof PublishStatus.Published;\n  } = {\n    disabled: false,\n    syncStatus: \"Full\",\n    publishStatus: \"Published\",\n  };\n\n  if (tagSlugs && tagSlugs.length > 0) {\n    conditions[\"tags\"] = { some: { tag: { slug: { in: tagSlugs } } } };\n  }\n\n  const lastCondition = lastVideoId\n    ? (await getLastVideo(lastVideoId))?.[by ?? \"publishedAt\"]\n    : null;\n\n  if (lastCondition) {\n    if (order === \"asc\") {\n      conditions[by ?? \"publishedAt\"] = { gt: lastCondition };\n    } else {\n      conditions[by ?? \"publishedAt\"] = { lt: lastCondition };\n    }\n  }\n\n  if (durations) {\n    const minMaxPairs =\n      getMinxMaxForTimeFilter(durations)?.map((pair) => {\n        return { gte: pair[0], lte: pair[1] };\n      }) ?? [];\n    if (minMaxPairs.length > 0) {\n      conditions[\"OR\"] = [];\n      minMaxPairs.forEach((pair) => {\n        conditions.OR?.push({ duration: pair });\n      });\n    }\n  }\n\n  return await prisma.$transaction([\n    prisma.video.findMany({\n      where: conditions,\n      take: take ?? 25,\n      include: { channel: true, tags: { include: { tag: true } } },\n      orderBy: {\n        [by ?? \"publishedAt\"]: order ?? \"desc\",\n      },\n    }),\n    prisma.video.count({\n      where: conditions,\n    }),\n  ]);\n};\n\nconst getLastVideo = async (lastVideoId: LastVideoIdType) => {\n  return await prisma.video.findUnique({\n    where: { id: lastVideoId },\n    select: { publishedAt: true, views: true, likes: true },\n  });\n};\n\nconst getMinxMaxForTimeFilter = (durations?: DurationListType) => {\n  return durations?.map((duration) => {\n    switch (duration) {\n      case \"short\":\n        return [0, 60 * 3];\n      case \"medium\":\n        return [60 * 3, 60 * 15];\n      case \"long\":\n        return [60 * 15, 60 * 30];\n      case \"extralong\":\n        return [60 * 30, 999999];\n      default:\n        return [0, 999999999];\n    }\n  });\n};\n\nexport default getVideos;\n", "import { z } from \"zod\";\nimport type { LoaderFunction, MetaFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useFetcher, useLoaderData } from \"@remix-run/react\";\nimport getVideos, { TagSlugsValidator } from \"~/lib/getVideos\";\nimport { prisma } from \"~/utils/prisma.server\";\nimport VideosGrid from \"~/components/VideosGrid\";\nimport { useEffect, useState } from \"react\";\nimport type { Tag } from \"@prisma/client\";\nimport { UrlParamsSchema } from \"~/utils/validators\";\nimport useUrlState from \"~/hooks/useUrlState\";\nimport useActionUrl from \"~/hooks/useActionUrl\";\nimport getActiveTagsBySlugs from \"~/lib/getActiveTagsBySlugs\";\n\nexport function headers() {\n  return {\n    \"Cache-Control\":\n      \"public, max-age=60, s-maxage=60, stale-while-revalidate=360\",\n  };\n}\n\nexport const meta: MetaFunction = ({ data, parentsData }) => {\n  // const { tags, tagSlugs }: { tags: Tag[]; tagSlugs: string[] } =\n  //   parentsData[\"routes/__videos\"];\n  const { activeTags } = data as LoaderData;\n  const title = activeTags.map((tag) => tag.name).join(\" and \");\n  return {\n    title: `${title} | HasanHub`,\n  };\n};\n\ntype GetVideoType = Awaited<ReturnType<typeof getVideos>>;\n\ntype LoaderData = {\n  videos: GetVideoType[0];\n  totalVideosCount: GetVideoType[1];\n  tagSlugs: string[];\n  activeTags: Tag[];\n};\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const url = new URL(request.url);\n  const slugs = params[\"*\"]?.split(\"/\") ?? [];\n  let lastVideoIdParam = url.searchParams.get(\"lastVideoId\");\n\n  try {\n    const { order, durations, by, lastVideoId } = UrlParamsSchema.parse({\n      order: url.searchParams.get(\"order\") ?? undefined,\n      durations: url.searchParams.getAll(\"durations\"),\n      by: url.searchParams.get(\"by\") ?? undefined,\n      lastVideoId: lastVideoIdParam ? parseInt(lastVideoIdParam) : undefined,\n    });\n\n    const tagSlugs = TagSlugsValidator.parse(slugs);\n\n    const [activeTags, [videos, totalVideosCount]] = await Promise.all([\n      await getActiveTagsBySlugs(tagSlugs),\n      getVideos({\n        tagSlugs,\n        order,\n        by,\n        durations,\n        lastVideoId,\n      }),\n    ]);\n\n    return json(\n      { totalVideosCount, videos, activeTags, tagSlugs },\n      {\n        status: 200,\n        headers: {\n          \"cache-control\":\n            \"public, max-age=60, s-maxage=60, stale-while-revalidate=360\",\n        },\n      }\n    );\n  } catch (error) {\n    console.log(error);\n    if (error instanceof z.ZodError) {\n      return json(error.issues, { status: 500 });\n    }\n    return json(error, { status: 500 });\n  } finally {\n    await prisma.$disconnect();\n  }\n};\n\nexport default function TagPage() {\n  const { videos, totalVideosCount, activeTags } = useLoaderData<LoaderData>();\n  const [liveVideos, setLiveVideos] = useState<typeof videos>(videos);\n  const fetcher = useFetcher();\n  const { isLoading, ordering } = useUrlState();\n  const { constructUrl } = useActionUrl();\n\n  const loaderUrl = (lastVideoId: number) =>\n    constructUrl({ lastVideoId: lastVideoId }, true);\n\n  useEffect(() => {\n    if (fetcher.data && fetcher.data.videos.length > 0) {\n      setLiveVideos((prev) => [...prev, ...fetcher.data.videos]);\n    }\n  }, [fetcher.data]);\n\n  const handleLoadMore = async (lastVideoId: number) => {\n    fetcher.load(loaderUrl(lastVideoId));\n  };\n\n  useEffect(() => {\n    setLiveVideos(videos);\n  }, [videos]);\n\n  let title;\n  if (ordering.by === \"publishedAt\") {\n    if (ordering.order === \"desc\") {\n      title = \"Latest\";\n    } else if (ordering.order === \"asc\") {\n      title = \"Oldest\";\n    }\n  } else if (ordering.by === \"views\") {\n    if (ordering.order === \"desc\") {\n      title = \"Most viewed\";\n    } else if (ordering.order === \"asc\") {\n      title = \"Least viewed\";\n    }\n  } else if (ordering.by === \"likes\") {\n    if (ordering.order === \"desc\") {\n      title = \"Most liked\";\n    } else if (ordering.order === \"asc\") {\n      title = \"Least liked\";\n    }\n  }\n\n  return (\n    <VideosGrid\n      totalVideosCount={totalVideosCount}\n      handleLoadMore={handleLoadMore}\n      title={`${title} videos about ${activeTags\n        .map((tag) => tag.name)\n        .join(\" and \")}`}\n      videos={liveVideos}\n      loading={isLoading}\n      loadMoreUrl={loaderUrl}\n      loadingMore={fetcher.state === \"loading\"}\n    />\n  );\n}\n", "import type { Tag } from \"@prisma/client\";\nimport TagButton from \"./tagButton\";\n\nconst Taglist = ({ tags }: { tags: Tag[] }) => {\n  return (\n    <ul className=\"flex flex-row flex-wrap px-3 lg:px-0 gap-3 text-sm w-full pb-3 overflow-x-auto\">\n      {tags.map((tag) => (\n        <li key={tag.id}>\n          <TagButton\n            href={`/tags/${tag.slug}`}\n            styleVariant=\"taglist\"\n            label={tag.name}\n            key={tag.id}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Taglist;\n", "import type { Channel, Tag, TagVideo, Video } from \"@prisma/client\";\nimport Taglist from \"./Taglist\";\n\nconst formatDate = (date: string | Date) => {\n  if (typeof date === \"string\") {\n    return new Date(date).toLocaleDateString();\n  }\n\n  return date.toLocaleDateString();\n};\n\nconst formatViewCount = (views: number) => {\n  if (views < 1000) {\n    return views;\n  } else if (views < 1000000) {\n    const thousands = Math.floor(views / 1000);\n    const hundreds = Math.floor((views % 1000) / 100);\n    return `${thousands}.${hundreds}k`;\n  } else {\n    const millions = Math.floor(views / 1000000);\n    const thousands = Math.floor((views % 1000000) / 10000);\n\n    return `${millions}.${thousands}m`;\n  }\n};\n\nconst formatDuration = (duration: number) => {\n  const hours = Math.floor(duration / 3600);\n  const minutes = Math.floor((duration % 3600) / 60);\n  const seconds = Math.floor(duration % 60);\n\n  const hoursString = hours > 0 ? hours : \"\";\n  const minutesString =\n    hours > 0 && minutes < 10 ? `0${minutes}` : `${minutes}`;\n  const secondsString = seconds > 9 ? `${seconds}` : `0${seconds}`;\n\n  return [hoursString, minutesString, secondsString].filter(Boolean).join(\":\");\n};\n\nconst VideoGridItem = ({\n  video,\n  layoutId,\n  lazy = false,\n}: {\n  video: Video & { channel: Channel | null } & {\n    tags: (TagVideo & {\n      tag: Tag | null;\n    })[];\n  };\n  lazy?: boolean;\n  layoutId?: string;\n}) => {\n  return (\n    <article\n      className=\"gap-5 h-full flex flex-col justify-between group\"\n      key={video.youtubeId}\n    >\n      <div className=\"px-3 lg:px-0\">\n        <div className=\"aspect-video relative shadow-md dark:shadow-slate-800 \">\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            href={`https://www.youtube.com/watch?v=${video.youtubeId}`}\n          >\n            <img\n              className=\"w-full h-full object-cover\"\n              loading={lazy ? \"lazy\" : \"eager\"}\n              alt={`Thumbnail for ${video.title}`}\n              src={video.largeThumbnailUrl ?? \"\"}\n            />\n            {video.duration && (\n              <div className=\"bg-lightBlack group-hover:bg-opacity-90 text-sm bg-opacity-80 text-light absolute bottom-1 right-1 px-2 py-1\">\n                {formatDuration(video.duration)}\n              </div>\n            )}\n          </a>\n        </div>\n\n        <ul className=\"flex flex-row justify-between py-2 items-center w-full text-sm\">\n          <li>{video.publishedAt && formatDate(video.publishedAt)}</li>\n          <li>\n            {video.views !== null && `${formatViewCount(video.views)} views`}\n          </li>\n        </ul>\n\n        <div className=\"flex flex-row space-x-3 items-center relative w-full\">\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"flex flex-row items-center gap-x-3 p-3 pl-0 overflow-clip overflow-hidden\"\n            href={`https://www.youtube.com/channel/${video.channel?.youtubeId}`}\n          >\n            <img\n              alt=\"\"\n              className=\"rounded-full\"\n              src={video.channel?.mediumThumbnailUrl ?? \"\"}\n              width={32}\n              height={32}\n              loading={lazy ? \"lazy\" : \"eager\"}\n            />\n            <h3 className=\"text-sm font-semibold overflow-clip w-max\">\n              {video.channel?.title}\n            </h3>\n          </a>\n        </div>\n\n        <a\n          rel=\"noreferrer\"\n          target=\"_blank\"\n          href={`https://www.youtube.com/watch?v=${video.youtubeId}`}\n        >\n          <h2 className=\"text-xl font-semibold flex-grow flex\">\n            {video.title}\n          </h2>\n        </a>\n      </div>\n\n      <div className=\" items-center \">\n        <Taglist tags={video.tags.map((tag) => tag.tag as Tag)} />\n      </div>\n    </article>\n  );\n};\n\nexport default VideoGridItem;\n", "import type { Channel, Tag, TagVideo, Video } from \"@prisma/client\";\nimport VideoGridItem from \"./VideoGridItem\";\nimport cx from \"classnames\";\nimport LoadingSpinner from \"./loadingSpinner\";\nimport useUrlState from \"~/hooks/useUrlState\";\nimport useActionUrl from \"~/hooks/useActionUrl\";\nimport { Link } from \"@remix-run/react\";\n\ntype VideoType = Video & {\n  channel: Channel | null;\n  tags: (TagVideo & {\n    tag: Tag | null;\n  })[];\n};\n\ntype Props = {\n  videos: VideoType[];\n  title: string;\n  totalVideosCount: number;\n  handleLoadMore: (lastVideoId: number) => Promise<void>;\n  loadMoreUrl: (lastVideoId: number) => string;\n  loading?: boolean;\n  loadingMore?: boolean;\n};\n\nconst VideosGrid = ({\n  videos,\n  title,\n  handleLoadMore,\n  totalVideosCount,\n  loading = false,\n  loadingMore = false,\n  loadMoreUrl,\n}: Props) => {\n  const { ordering } = useUrlState();\n  const { constructUrl } = useActionUrl();\n  const lastVideoId = videos ? videos[videos.length - 1]?.id : null;\n\n  return (\n    <section aria-label={title} className=\"w-full lg:w-3/4 xl:w-4/5 relative\">\n      <div\n        className={cx(\n          \"sticky top-0 w-full gap-1 text-left sm:gap-3 bg-light dark:bg-lightBlack z-20 transition-opacity flex flex-col md:flex-row md:items-center md:justify-between px-3 lg:px-0 mb-5 py-5\"\n        )}\n      >\n        <div className={cx(\"flex flex-col\", { \"opacity-0\": loading })}>\n          <h1 className={cx(\"text-4xl md:text-5xl mt-0\")}>{title}</h1>\n          <div className=\"text-sm font-semibold\">\n            <strong className={cx(\"font-extrabold\")}>\n              {videos?.length ?? 0}\n            </strong>{\" \"}\n            of{\" \"}\n            <strong className={cx(\"font-extrabold\")}>{totalVideosCount}</strong>{\" \"}\n            Videos shown\n          </div>\n        </div>\n\n        <div className=\"flex flex-row gap-1 sm:gap-10 justify-between lg:flex-row md:justify-end my-3 md:my-0\">\n          <ul className=\"flex flex-row\">\n            <li>\n              <Link\n                className={cx(\n                  \"border-twitchPurpleLight duration-400 transition-colors border border-r-0  betterhover:hover:bg-twitchPurpleLight betterhover:hover:text-light saturate-50 px-3 py-2 rounded-lg rounded-r-none\",\n                  ordering.by === \"publishedAt\"\n                    ? \"bg-twitchPurpleLight text-light\"\n                    : \"bg-light dark:bg-lightBlack text-twitchPurpleLight\"\n                )}\n                to={constructUrl({\n                  ordering: { by: \"publishedAt\", order: ordering.order },\n                })}\n              >\n                Date\n              </Link>\n            </li>\n            <li>\n              <Link\n                className={cx(\n                  \"border-twitchPurpleLight duration-400 transition-colors border border-l-0 betterhover:hover:bg-twitchPurpleLight betterhover:hover:text-light saturate-50 px-3 py-2 rounded-lg rounded-l-none\",\n                  ordering.by === \"views\"\n                    ? \"bg-twitchPurpleLight text-light\"\n                    : \"bg-light dark:bg-lightBlack text-twitchPurpleLight\"\n                )}\n                to={constructUrl({\n                  ordering: { by: \"views\", order: ordering.order },\n                })}\n              >\n                Popularity\n              </Link>\n            </li>\n          </ul>\n          <ul className=\"flex flex-row rounded-lg\">\n            <li>\n              <Link\n                className={cx(\n                  \"border-twitchPurpleLight duration-400 transition-colors border border-r-0 betterhover:hover:bg-twitchPurpleLight betterhover:hover:text-light saturate-50 px-3 py-2 rounded-lg rounded-r-none\",\n                  ordering.order === \"asc\"\n                    ? \"bg-twitchPurpleLight text-light\"\n                    : \"bg-light dark:bg-lightBlack text-twitchPurpleLight\"\n                )}\n                to={constructUrl({\n                  ordering: { order: \"asc\", by: ordering.by },\n                })}\n              >\n                Asc\n              </Link>\n            </li>\n            <li>\n              <Link\n                className={cx(\n                  \"border-twitchPurpleLight duration-400 transition-colors border border-l-0 betterhover:hover:bg-twitchPurpleLight betterhover:hover:text-light saturate-50 px-3 py-2 rounded-lg rounded-l-none\",\n                  ordering.order === \"desc\"\n                    ? \"bg-twitchPurpleLight text-light\"\n                    : \"bg-light dark:bg-lightBlack text-twitchPurpleLight\"\n                )}\n                to={constructUrl({\n                  ordering: { order: \"desc\", by: ordering.by },\n                })}\n              >\n                Desc\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"relative\">\n        <ul className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-10 xl:gap-12 relative z-10\">\n          {videos\n            ?.filter((video) => !video.disabled)\n            .map((video, index) => (\n              <li\n                style={{\n                  animationDuration: `${Math.min(\n                    300 + (index % 25) * 150,\n                    1500\n                  )}ms`,\n                  animationName: \"fadeIn\",\n                }}\n                key={video.youtubeId}\n                className={cx(\"will-fade-scale transition-opacity\", {\n                  \"opacity-0\": loading,\n                })}\n              >\n                <VideoGridItem video={video} lazy={index === 0} />\n              </li>\n            ))}\n        </ul>\n        {loading ? (\n          <div\n            style={{\n              animationName: \"fadeIn\",\n              animationDelay: \"250ms\",\n              animationDuration: \"500ms\",\n            }}\n            className=\"flex absolute top-20 w-full justify-center opacity-0\"\n          >\n            <LoadingSpinner />\n          </div>\n        ) : (\n          <div className=\"w-full flex justify-center items-center my-10\">\n            {totalVideosCount > videos?.length ? (\n              loadingMore ? (\n                <LoadingSpinner />\n              ) : (\n                <a\n                  href={loadMoreUrl(lastVideoId ?? -1)}\n                  onClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n\n                    handleLoadMore(lastVideoId ?? -1);\n                  }}\n                  className=\"bg-twitchPurpleLight text-light text-center font-bold betterhover:hover:bg-twitchPurpleLight px-4 py-2 rounded inline-block saturate-50\"\n                >\n                  Load more\n                </a>\n              )\n            ) : (\n              <span>All done</span>\n            )}\n          </div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default VideosGrid;\n", "const LoadingSpinner = () => {\n  return (\n    <div className=\"flex justify-center items-center gap-3\">\n      <span className=\"sr-only\">Loading...</span>\n      <div\n        className=\"will-fade-scale bg-twitchPurple saturate-50 h-10 w-3\"\n        style={{\n          animationDuration: \"1000ms\",\n          animationName: \"pulse\",\n          animationIterationCount: \"infinite\",\n        }}\n      ></div>\n      <div\n        className=\"will-fade-scale bg-twitchPurple saturate-50 h-10 w-3\"\n        style={{\n          animationDuration: \"1500ms\",\n          animationName: \"pulse\",\n          animationIterationCount: \"infinite\",\n        }}\n      ></div>\n      <div\n        className=\"will-fade-scale bg-twitchPurple saturate-50 h-10 w-3\"\n        style={{\n          animationDuration: \"2000ms\",\n          animationName: \"pulse\",\n          animationIterationCount: \"infinite\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n", "import { prisma } from \"~/utils/prisma.server\";\nconst getActiveTagsBySlugs = async (tagSlugs: string[] | undefined) => {\n  return tagSlugs\n    ? await prisma.tag.findMany({\n        where: {\n          slug: { in: tagSlugs },\n        },\n      })\n    : [];\n};\n\nexport default getActiveTagsBySlugs;\n", "import { json } from \"@remix-run/node\";\nimport type { LoaderFunction } from \"@remix-run/node\";\nimport { useFetcher, useLoaderData } from \"@remix-run/react\";\nimport { prisma } from \"~/utils/prisma.server\";\nimport VideosGrid from \"~/components/VideosGrid\";\nimport getVideos from \"../../lib/getVideos\";\nimport { useEffect, useState } from \"react\";\nimport { UrlParamsSchema } from \"~/utils/validators\";\nimport { z } from \"zod\";\nimport useUrlState from \"~/hooks/useUrlState\";\nimport useActionUrl from \"~/hooks/useActionUrl\";\n\nexport function headers() {\n  return {\n    \"Cache-Control\":\n      \"public, max-age=60, s-maxage=60, stale-while-revalidate=360\",\n  };\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const url = new URL(request.url);\n  let lastVideoIdParam = url.searchParams.get(\"lastVideoId\");\n\n  try {\n    const { order, durations, by, lastVideoId } = UrlParamsSchema.parse({\n      order: url.searchParams.get(\"order\") ?? undefined,\n      durations: url.searchParams.getAll(\"durations\"),\n      by: url.searchParams.get(\"by\") ?? undefined,\n      lastVideoId: lastVideoIdParam ? parseInt(lastVideoIdParam) : undefined,\n    });\n\n    const [videos, totalVideosCount] = await getVideos({\n      order,\n      durations,\n      by,\n      lastVideoId,\n    });\n\n    return json(\n      { totalVideosCount, videos },\n      {\n        status: 200,\n        headers: {\n          \"cache-control\":\n            \"public, max-age=60, s-maxage=60, stale-while-revalidate=360\",\n        },\n      }\n    );\n  } catch (error) {\n    console.log(error);\n    if (error instanceof z.ZodError) {\n      return json(error.issues, { status: 500 });\n    }\n    return json(error, { status: 500 });\n  } finally {\n    await prisma.$disconnect();\n  }\n};\n\nexport default function Index() {\n  const { totalVideosCount, videos } = useLoaderData();\n  const [liveVideos, setLiveVideos] = useState<typeof videos>(videos);\n  const fetcher = useFetcher();\n  const { isLoading, ordering } = useUrlState();\n  const { constructUrl } = useActionUrl();\n\n  const loaderUrl = (lastVideoId: number) =>\n    constructUrl({ lastVideoId: lastVideoId }, true);\n\n  useEffect(() => {\n    if (fetcher.data && fetcher.data.videos?.length > 0) {\n      setLiveVideos((prev) => [...prev, ...fetcher.data.videos]);\n    }\n  }, [fetcher.data]);\n\n  useEffect(() => {\n    setLiveVideos(videos);\n  }, [videos]);\n\n  const handleLoadMore = async (lastVideoId: number) => {\n    fetcher.load(loaderUrl(lastVideoId));\n  };\n\n  let title;\n  if (ordering.by === \"publishedAt\") {\n    if (ordering.order === \"desc\") {\n      title = \"Latest\";\n    } else if (ordering.order === \"asc\") {\n      title = \"Oldest\";\n    }\n  } else if (ordering.by === \"views\") {\n    if (ordering.order === \"desc\") {\n      title = \"Most Viewed\";\n    } else if (ordering.order === \"asc\") {\n      title = \"Least Viewed\";\n    }\n  } else if (ordering.by === \"likes\") {\n    if (ordering.order === \"desc\") {\n      title = \"Most Liked\";\n    } else if (ordering.order === \"asc\") {\n      title = \"Least Liked\";\n    }\n  }\n\n  return (\n    <VideosGrid\n      totalVideosCount={totalVideosCount}\n      handleLoadMore={handleLoadMore}\n      title={`${title} videos`}\n      videos={liveVideos}\n      loading={isLoading}\n      loadMoreUrl={loaderUrl}\n      loadingMore={fetcher.state === \"loading\"}\n    />\n  );\n}\n", "import { PublishStatus } from \"@prisma/client\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { prisma } from \"~/utils/prisma.server\";\n\nconst getAggregationData = async () => {\n  const [stats, statsWithoutMain, statsPerMonth, statsPerChannel] =\n    await Promise.all([\n      prisma.video.aggregate({\n        _count: true,\n        _sum: {\n          views: true,\n        },\n        where: {\n          publishStatus: PublishStatus.Published,\n        },\n      }),\n      prisma.video.aggregate({\n        _count: true,\n        _sum: {\n          views: true,\n        },\n        where: {\n          publishStatus: PublishStatus.Published,\n          channelId: 224,\n        },\n      }),\n      prisma.$queryRaw`\n      SELECT\n        concat(year(v.publishedAt), '_', month(v.publishedAt)) yearWithMonth,\n        count(*) videos_count,\n        sum(v.views) views_sum\n      FROM Video v\n      GROUP BY yearWithMonth\n      ORDER BY yearWithMonth desc\n    `,\n      prisma.$queryRaw`\n      SELECT\n        c.title as title,\n        count(*) as videos_count,\n        sum(v.views) as views_sum\n      FROM Video v join Channel c on v.channelId = c.id\n      GROUP BY c.title\n      ORDER BY sum(views) desc\n    `,\n    ]);\n\n  return { stats, statsWithoutMain, statsPerMonth, statsPerChannel };\n};\n\nexport async function loader() {\n  try {\n    return json(await getAggregationData(), {\n      status: 200,\n      headers: {\n        \"cache-control\":\n          \"public, max-age=60, s-maxage=60, stale-while-revalidate=360\",\n      },\n    });\n  } catch (e) {\n    console.log({ error: e });\n\n    return json({ error: e }, { status: 500 });\n  } finally {\n    prisma.$disconnect();\n  }\n}\n\ntype LoaderSuccessType = Awaited<ReturnType<typeof getAggregationData>>;\ntype LoaderFailureType = { error: string };\ntype LoaderDataType = LoaderSuccessType | LoaderFailureType;\n\nexport default function Stats() {\n  const data = useLoaderData<LoaderDataType>();\n\n  if (\"error\" in data) {\n    return <div>Error fetching the page</div>;\n  }\n\n  const { stats, statsWithoutMain, statsPerMonth, statsPerChannel } = data;\n\n  console.log(stats, statsWithoutMain, statsPerMonth, statsPerChannel);\n\n  return (\n    <div>\n      <h1>Stats</h1>\n      <p></p>\n\n      <div className=\"flex flex-row items-center justify-around gap-10\">\n        <div className=\"text-center flex flex-col gap-3 text-white bg-twitchPurpleLight saturate-50 p-4\">\n          <h2>Total Videos (all)</h2>\n          <p>{stats._count}</p>\n        </div>\n\n        <div className=\"text-center flex flex-col gap-3 text-white bg-twitchPurpleLight saturate-50 p-4\">\n          <h2>Total Views (all)</h2>\n          <p>{(stats._sum.views ?? 0) / 1_000_000}</p>\n        </div>\n\n        <div className=\"text-center flex flex-col gap-3 text-white bg-twitchPurpleLight saturate-50 p-4\">\n          <h2>\n            Total Videos (without{\" \"}\n            <a href=\"https://youtube.com/c/hasanabi\">HasanAbi</a>)\n          </h2>\n          <p>{statsWithoutMain._count}</p>\n        </div>\n\n        <div className=\"text-center flex flex-col gap-3 text-white bg-twitchPurpleLight saturate-50 p-4\">\n          <h2>\n            Total Views (without{\" \"}\n            <a href=\"https://youtube.com/c/hasanabi\">HasanAbi</a>)\n          </h2>\n          <p>{(statsWithoutMain._sum.views ?? 0) / 1_000_000}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "export default {'version':'82558b88','entry':{'module':'/build/entry.client-DU5DSJZK.js','imports':['/build/_shared/chunk-MSE76CW3.js','/build/_shared/chunk-5KL4PAQL.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-3PC6PN7X.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/[robots.txt]':{'id':'routes/[robots.txt]','parentId':'root','path':'robots.txt','index':undefined,'caseSensitive':undefined,'module':'/build/routes/[robots.txt]-VQ27HJRM.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/[sitemap.xml]':{'id':'routes/[sitemap.xml]','parentId':'root','path':'sitemap.xml','index':undefined,'caseSensitive':undefined,'module':'/build/routes/[sitemap.xml]-LMNECGY7.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__videos':{'id':'routes/__videos','parentId':'root','path':undefined,'index':undefined,'caseSensitive':undefined,'module':'/build/routes/__videos-HCEC2DVD.js','imports':['/build/_shared/chunk-3UTUHOGQ.js','/build/_shared/chunk-CQHW3PHH.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__videos/index':{'id':'routes/__videos/index','parentId':'routes/__videos','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/__videos/index-6IMXY5YD.js','imports':['/build/_shared/chunk-T7KWIJJT.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/__videos/tags/$':{'id':'routes/__videos/tags/$','parentId':'routes/__videos','path':'tags/*','index':undefined,'caseSensitive':undefined,'module':'/build/routes/__videos/tags/$-UCHGMZG3.js','imports':['/build/_shared/chunk-T7KWIJJT.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/api/getTagsForSidebar':{'id':'routes/api/getTagsForSidebar','parentId':'root','path':'api/getTagsForSidebar','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api/getTagsForSidebar-HS6RMX7J.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/api/matchTags':{'id':'routes/api/matchTags','parentId':'root','path':'api/matchTags','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api/matchTags-3ZBYAIBE.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/api/syncChannel':{'id':'routes/api/syncChannel','parentId':'root','path':'api/syncChannel','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api/syncChannel-ZHALXEGG.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/api/syncChannels':{'id':'routes/api/syncChannels','parentId':'root','path':'api/syncChannels','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api/syncChannels-H2UOWQ3I.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/api/syncNewVideos':{'id':'routes/api/syncNewVideos','parentId':'root','path':'api/syncNewVideos','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api/syncNewVideos-VICB7UI6.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/api/syncVideos':{'id':'routes/api/syncVideos','parentId':'root','path':'api/syncVideos','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api/syncVideos-3HNF45II.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/stats':{'id':'routes/stats','parentId':'root','path':'stats','index':undefined,'caseSensitive':undefined,'module':'/build/routes/stats-THKOMFX7.js','imports':['/build/_shared/chunk-CQHW3PHH.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-82558B88.js'};", "\nimport * as entryServer from \"./entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/api/getTagsForSidebar.ts\";\nimport * as route2 from \"./routes/api/syncNewVideos.ts\";\nimport * as route3 from \"./routes/api/syncChannels.ts\";\nimport * as route4 from \"./routes/api/syncChannel.ts\";\nimport * as route5 from \"./routes/api/syncVideos.ts\";\nimport * as route6 from \"./routes/[sitemap.xml].tsx\";\nimport * as route7 from \"./routes/api/matchTags.ts\";\nimport * as route8 from \"./routes/[robots.txt].tsx\";\nimport * as route9 from \"./routes/__videos.tsx\";\nimport * as route10 from \"./routes/__videos/tags/$.tsx\";\nimport * as route11 from \"./routes/__videos/index.tsx\";\nimport * as route12 from \"./routes/stats.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/api/getTagsForSidebar\": {\n      id: \"routes/api/getTagsForSidebar\",\n      parentId: \"root\",\n      path: \"api/getTagsForSidebar\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/api/syncNewVideos\": {\n      id: \"routes/api/syncNewVideos\",\n      parentId: \"root\",\n      path: \"api/syncNewVideos\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/api/syncChannels\": {\n      id: \"routes/api/syncChannels\",\n      parentId: \"root\",\n      path: \"api/syncChannels\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/api/syncChannel\": {\n      id: \"routes/api/syncChannel\",\n      parentId: \"root\",\n      path: \"api/syncChannel\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/api/syncVideos\": {\n      id: \"routes/api/syncVideos\",\n      parentId: \"root\",\n      path: \"api/syncVideos\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/[sitemap.xml]\": {\n      id: \"routes/[sitemap.xml]\",\n      parentId: \"root\",\n      path: \"sitemap.xml\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/api/matchTags\": {\n      id: \"routes/api/matchTags\",\n      parentId: \"root\",\n      path: \"api/matchTags\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/[robots.txt]\": {\n      id: \"routes/[robots.txt]\",\n      parentId: \"root\",\n      path: \"robots.txt\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/__videos\": {\n      id: \"routes/__videos\",\n      parentId: \"root\",\n      path: undefined,\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/__videos/tags/$\": {\n      id: \"routes/__videos/tags/$\",\n      parentId: \"routes/__videos\",\n      path: \"tags/*\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/__videos/index\": {\n      id: \"routes/__videos/index\",\n      parentId: \"routes/__videos\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/stats\": {\n      id: \"routes/stats\",\n      parentId: \"root\",\n      path: \"stats\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    }\n  };"],
  "mappings": "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",
  "names": ["import_react", "import_react", "loader", "import_node", "loader", "loader", "import_node", "Parser", "loader", "meta", "loader", "import_node", "Youtube", "getChannel", "import_client", "loader", "getChannel", "loader", "import_client", "import_node", "import_zod", "import_html_entities", "loader", "loader", "import_node", "import_client", "import_html_entities", "loader", "loader", "loader", "loader", "import_node", "loader", "batchTransactions", "loader", "loader", "import_node", "import_react", "import_react", "cx", "import_react", "import_zod", "import_zod", "_a", "loader", "loader", "meta", "import_zod", "import_node", "import_react", "formatDate", "import_classnames", "import_react", "cx", "import_react", "meta", "loader", "videos_exports", "headers", "loader", "import_node", "import_react", "import_react", "import_zod", "headers", "loader", "loader", "import_client", "import_node", "import_react", "loader", "videos_exports"]
}
